import streamlit as st
import pandas as pd
from spacy.lang.en.stop_words import STOP_WORDS
from sklearn.feature_extraction.text import TfidfVectorizer
import plotly.express as px
from wordcloud import WordCloud
import matplotlib.pyplot as plt
from collections import Counter
import plotly.graph_objects as go
import numpy as np

st.set_page_config(page_title="Analysis", page_icon="üìâ")

df = pd.read_csv('dashboard/data/lyrics_for_analysis1.csv')
st.title('–ê–Ω–∞–ª–∏–∑ —Ç–µ–∫—Å—Ç–∞ –ø–µ—Å–µ–Ω')
st.markdown('–ù–∞—à –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π –¥–∞—Ç–∞—Ñ—Ä–µ–π–º(–ø—Ä–æ–≤–µ–¥–µ–Ω–∞ –ø–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –∏ –ª–µ–º–º–∞—Ç–∏–∑–∞—Ü–∏—è):')
st.dataframe(df)


st.markdown('## –û–±–ª–∞–∫–æ —Å–ª–æ–≤')


def generate_wordcloud(artist_name=None, df=None,
                       background_color='white',
                       colormap='viridis',  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ü–≤–µ—Ç–æ–≤–∞—è —Å—Ö–µ–º–∞
                       max_words=100,
                       figsize=(12, 8)):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ–±–ª–∞–∫–æ —Å–ª–æ–≤ —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Ü–≤–µ—Ç–æ–≤–æ–π —Å—Ö–µ–º–æ–π
    """
    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
    if artist_name:
        data = df[df['artist'] == artist_name]['lemmatized_text']
        if data.empty:
            st.error(f"–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å '{artist_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö.")
            return None
    else:
        data = df['lemmatized_text']

    # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
    all_text = ' '.join(data.astype(str))

    # –ü–æ–¥—Å—á–µ—Ç —á–∞—Å—Ç–æ—Ç—ã —Å–ª–æ–≤
    word_freq = Counter(all_text.split())

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–∞–∫–∞
    wordcloud = WordCloud(
        width=figsize[0] * 100,
        height=figsize[1] * 100,
        background_color=background_color,
        colormap=colormap,
        max_words=max_words
    ).generate_from_frequencies(word_freq)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∏–≥—É—Ä—ã
    fig = plt.figure(figsize=figsize)
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.axis('off')

    if artist_name:
        plt.title(f'–û–±–ª–∞–∫–æ —Å–ª–æ–≤ –¥–ª—è {artist_name}', fontsize=14, pad=20)
    else:
        plt.title('–û–±–ª–∞–∫–æ —Å–ª–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π', fontsize=14, pad=20)

    return fig


# –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª–µ–π
artists = ['–ü–æ –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º'] + sorted(df['artist'].unique().tolist())

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit
st.title('–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–µ –æ–±–ª–∞–∫–æ —Å–ª–æ–≤')

cloud_choice = st.selectbox(
    '–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è –∫–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç—å –æ–±–ª–∞–∫–æ —Å–ª–æ–≤:',
    artists
)

# –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
max_words = st.slider(
    '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª–æ–≤:',
    min_value=50,
    max_value=200,
    value=100
)

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–ª–∞–∫–∞
if cloud_choice == '–ü–æ –≤—Å–µ–º –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º':
    fig = generate_wordcloud(df=df, max_words=max_words)
else:
    fig = generate_wordcloud(artist_name=cloud_choice, df=df, max_words=max_words)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
if fig:
    st.pyplot(fig)
else:
    st.warning('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ–±–ª–∞–∫–æ —Å–ª–æ–≤')






st.markdown('## –í—Å—Ç—Ä–µ—á–∞–µ–º–æ—Å—Ç—å –ø–æ —á–∞—Å—Ç—è–º —Ä–µ—á–∏')

pos_df = pd.read_csv('dashboard/data/pos_analysis1.csv')
pos_categories = ['noun', 'verb', 'adj', 'adv']
pos_choice = st.selectbox(
    '–í—ã–±–µ—Ä–µ—Ç–µ —á–∞—Å—Ç—å —Ä–µ—á–∏:',
    pos_categories
)
n_words = st.slider(
    '–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–ª–æ–≤:',
    min_value=5,
    max_value=20,
    value=20
)
# –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π —á–∞—Å—Ç–∏ —Ä–µ—á–∏
filtered_df = pos_df[pos_df['part_of_speech'] == pos_choice].head(n_words)

# –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞
fig1 = px.bar(
    filtered_df,
    x='frequency',
    y='word',
    orientation='h',
    title=f'–¢–æ–ø {n_words} —Å–∞–º—ã—Ö —á–∞—Å—Ç—ã—Ö {pos_choice}',
    labels={'frequency': '–ß–∞—Å—Ç–æ—Ç–∞', 'word': '–°–ª–æ–≤–æ'},
    color='frequency',
    color_continuous_scale='Blues'
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
fig1.update_layout(
    yaxis={'categoryorder': 'total ascending'},  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —á–∞—Å—Ç–æ—Ç–µ
    height=600,
    showlegend=False,
    margin=dict(l=50, r=50, t=50, b=50)
)

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –≤ Streamlit
st.plotly_chart(fig1, use_container_width=True)



st.markdown('## –•–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã–µ —Å–ª–æ–≤–∞')

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è–º –∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
grouped = df.groupby('artist')['lemmatized_text'].agg(' '.join).reset_index()


custom_stop_words = [
    "gobble", "bidee", "ve", "ll", "oh", "ya", "ain", "don", "didn", "te", "fasule", "tay", "ce",
    "la", "em", "di", "il", "er", "de", "to", "ba", "da", "doo", "zee", "boo", "mmm", "ho", "ti", "to"]

# –†–∞—Å—à–∏—Ä–∏–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
STOP_WORDS.update(custom_stop_words)
# –°–æ–∑–¥–∞–Ω–∏–µ TF-IDF –º–∞—Ç—Ä–∏—Ü—ã
vectorizer = TfidfVectorizer(max_features=1000, stop_words = list(STOP_WORDS))   # –ù–µ –∑–∞–±—ã–≤–∞–µ–º –ø—Ä–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –Ω–∞–±–æ—Ä —Å—Ç–æ–ø-—Å–ª–æ–≤
tfidf_matrix = vectorizer.fit_transform(grouped['lemmatized_text'])

# –î–∞—Ç–∞—Ñ—Ä–µ–π–º —Å –≤–µ—Å–∞–º–∏ TF-IDF
tfidf_df = pd.DataFrame(
    tfidf_matrix.toarray(),
    columns=vectorizer.get_feature_names_out(),
    index=grouped['artist']
)

# –≠–ª–µ–º–µ–Ω—Ç—ã –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
artists = grouped['artist'].unique()
selected_artist = st.selectbox('–í—ã–±–µ—Ä–∏—Ç–µ –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è', artists)
n_words = st.slider('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å–ª–æ–≤', 5, 20, 10)

# –ü–∞–ª–∏—Ç—Ä—ã –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ü–≤–µ—Ç–∞
artist_palettes = {
    'Nat ‚ÄúKing‚Äù Cole': px.colors.sequential.YlOrBr,
    'Frank Sinatra': px.colors.diverging.RdYlGn,
    'Dean Martin': px.colors.sequential.PuBu,
    'Louis Armstrong': px.colors.sequential.Cividis
}


def create_interactive_plot(artist, n=10):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-—Å–ª–æ–≤ –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    top_words = tfidf_df.loc[artist].nlargest(n)
    top_words = top_words.sort_values(ascending=False)

    # –°–æ–∑–¥–∞–µ–º DataFrame –¥–ª—è Plotly
    plot_df = pd.DataFrame({
        '–°–ª–æ–≤–æ': top_words.index,
        '–í–µ—Å TF-IDF': top_words.values
    })

    # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ª–∏—Ç—Ä—É
    colors = artist_palettes.get(artist, px.colors.qualitative.Pastel)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫
    fig = px.bar(
        plot_df,
        x='–í–µ—Å TF-IDF',
        y='–°–ª–æ–≤–æ',
        orientation='h',
        color='–°–ª–æ–≤–æ',
        color_discrete_sequence=colors,
        text='–í–µ—Å TF-IDF',
        height=600
    )

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ
    fig.update_layout(
        title={
            'text': f"–¢–æ–ø-{n} —Ö–∞—Ä–∞–∫—Ç–µ—Ä–Ω—ã—Ö —Å–ª–æ–≤ –¥–ª—è {artist}",
            'y': 0.95,
            'x': 0.5,
            'xanchor': 'center',
            'yanchor': 'top'
        },
        xaxis_title="–í–µ—Å TF-IDF",
        yaxis_title="–°–ª–æ–≤–æ",
        showlegend=False,
        hovermode='closest',                  # –ø–æ–¥—Å–∫–∞–∑–∫–∞
        margin=dict(l=100, r=50, t=80, b=50), # –æ—Ç—Å—Ç—É–ø—ã
        font=dict(size=12)
    )

    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø–æ–¥–ø–∏—Å–∏
    fig.update_traces(
        texttemplate='%{text:.3f}',
        textposition='outside'
    )

    return fig


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
if selected_artist in tfidf_df.index:
    plot = create_interactive_plot(selected_artist, n_words)
    st.plotly_chart(plot, use_container_width=True)
else:
    st.error("–í—ã–±—Ä–∞–Ω–Ω—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")